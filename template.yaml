#file: noinspection YAMLSchemaValidation
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "SAM Template para una función Lambda con hono.js\n"
Resources:
  HonoCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: HonoUserPool
      AutoVerifiedAttributes:
        - email

  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: HonoUserPoolClient
      UserPoolId: !Ref HonoCognitoUserPool
      GenerateSecret: false

  MyCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: hono-app-domain
      UserPoolId: !Ref HonoCognitoUserPool

  UsersDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'UsersDB'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'email'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
        - AttributeName: 'email'
          KeyType: 'RANGE'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  HonoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Hono-test
      CodeUri: ./src/
      Handler: dist/index.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Description: Sample function for hono.js
      Environment:
        Variables:
          USER_DB: !Ref UsersDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersDBTable
      Events:
        ProxyApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId:
              Ref: MyApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: MyApiGateway

  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyApiGateway
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt HonoCognitoUserPool.Arn
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              responses: { }
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HonoFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HonoFunction
      Principal: apigateway.amazonaws.com

Outputs:
  HonoFunctionArn:
    Description: "ARN de la función Lambda"
    Value:
      Fn::GetAtt:
        - HonoFunction
        - Arn
  MyApiGatewayUrl:
    Description: URL de la API Gateway
    Value:
      Fn::Sub: https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/
